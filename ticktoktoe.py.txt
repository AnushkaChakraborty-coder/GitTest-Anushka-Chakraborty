import tkinter as tk
from tkinter import messagebox
import random

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'X'):
        return -1
    if check_winner(board, 'O'):
        return 1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best = max(best, score)
        return best
    else:
        best = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best = min(best, score)
        return best

def best_move(board):
    best_val = float('-inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '
                if move_val > best_val:
                    best_val = move_val
                    move = (i, j)
    return move

def make_move(row, col):
    if board[row][col] == ' ' and not game_ended:
        board[row][col] = 'X'
        buttons[row][col].config(text='X', state='disabled')
        if check_winner(board, 'X'):
            end_game("You win!")
        elif is_board_full(board):
            end_game("It's a draw!")
        else:
            root.after(500, ai_move)

def ai_move():
    if not game_ended:
        move = best_move(board)
        if move:
            row, col = move
            board[row][col] = 'O'
            buttons[row][col].config(text='O', state='disabled')
            if check_winner(board, 'O'):
                end_game("AI wins!")
            elif is_board_full(board):
                end_game("It's a draw!")

def end_game(message):
    global game_ended
    game_ended = True
    messagebox.showinfo("Game Over", message)

def reset_game():
    global board, game_ended
    board = [[' ' for _ in range(3)] for _ in range(3)]
    game_ended = False
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(text=' ', state='normal')

root = tk.Tk()
root.title("Tic-Tac-Toe")

board = [[' ' for _ in range(3)] for _ in range(3)]
buttons = []
game_ended = False

for i in range(3):
    row_buttons = []
    for j in range(3):
        button = tk.Button(root, text=' ', font=('Arial', 30), width=5, height=2,
                           command=lambda row=i, col=j: make_move(row, col))
        button.grid(row=i, column=j)
        row_buttons.append(button)
    buttons.append(row_buttons)

# Restart Button
restart_btn = tk.Button(root, text="Restart", font=('Arial', 14), command=reset_game)
restart_btn.grid(row=3, column=0, columnspan=3, sticky="nsew")

root.mainloop()
